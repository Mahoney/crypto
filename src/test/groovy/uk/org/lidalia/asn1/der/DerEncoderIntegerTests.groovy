package uk.org.lidalia.asn1.der

import spock.lang.Unroll
import uk.org.lidalia.asn1.Asn1
import uk.org.lidalia.asn1.Asn1Integer
import uk.org.lidalia.encoding.Bytes
import uk.org.lidalia.encoding.EncoderTests

import static uk.org.lidalia.asn1.der.DerEncoder.der
import static uk.org.lidalia.encoding.hex.HexEncoder.hex

class DerEncoderIntegerTests extends EncoderTests<Asn1, Bytes, Der> {

    DerEncoder encoder = der

    Asn1 instance1 = Asn1Integer.of(BigInteger.valueOf(new Random().nextInt()))
    Asn1 instance2 = Asn1Integer.of(BigInteger.valueOf(new Random().nextInt()))

    @Unroll
    def 'can decode an integer'() {

        given:
            def bytes = hex.of(bytesAsHex).decode()

        expect:
            der.of(bytes).decode() == Asn1Integer.of(integerValue)

        where:
            bytesAsHex                                                                                                                                                                                                                                                           | integerValue
            '020100'                                                                                                                                                                                                                                                             | BigInteger.ZERO
            '02810100' | BigInteger.ZERO
            '027F100102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E' | new BigInteger('43899791841096231375335560133913698194092254938553230549996114653246125149401433798335483461450031049819349913250781059244320433237190849466957512246841488907281106246654681357619850590631184553037423880123599901691767996079123583965661942414007388333666675268754832047250641792936659997324873260694506766')
            '0282020100cab25fbac06c771e163ad44d22b68de6727a3772b48e409bdd796c58b74ce306e46cb8aef2db2a7a2bc7746af8071d69775decde4c26ca2fcf0536a50866f9ddd08470d23841cd470855447f0c22a4fc2c5595e2ea898c5b2d51c5bcfb6ac4964dddb6b6378c47d5934e45c546db66e80522a02a03fdaa712d576289c67a3ed92fdf23611c7729913e2f6a0c44ecdf19a69370c25c6d96625779a965bb4b2a42b590c0d9712dacd65ba968748d149b940ac88a3bcbc04d1785bce101444b6084808a368efbd1e36e9a19eee3e0f7e5b08387d0597ac7511d7fc8739321981b8d86e9d9ef606647f69dbc53b3c2b06ad9f9f32b0de08cb267eaa904ae787569e8f748fbdc86ecbc42e6156a47c97085a0c512b99decc2b7f24a0e9e0c62e74dda5bd2e7286f5a10c56f360c0c39c9417e694c0ba181f5c96098023a9c559ab1774b7967d8c0ffa08dc03827029a9ff3c776e44202ffa6b9f0f7e163e75c57cb09629d4a55866ee9f0ccbcc5e024af22a33884e13f8d17d04fe8b2658493308cb3aa8ab501425898a8dc27a7c2a473b095bab4c8b428587c2e36ead2d48bee3dacf410455bdf4a13f9e6d698c16adf33fb261a287d9f6a0a0abb6c7ac3192a10be05cad986e74cf9e0744a69910be9aba5e0d38ff4053bf8186a6a85b3929d3b7e4287339928112fc40cb98d14ce251da290710d123b0c1daf0ea771f82b42a18f' | new BigInteger('826930688458401427167337078644639758102190287528354615888648434784781470414802825884263861959041030631281360332567339294455324344604162337720715216593518483218425350595691685374133607611484129008404486303467182510180390250108030833512771761834087873079426627064390193655690557121195818877453850457463052851207349085927463833027127106071220957621018437474049577421379860303512177509088573609807558120660849580386536283915666842882411597305997102875620680330552525533473644043474378806608524262327738894591819998615368887155819156261938344800936932880946983006327036501760323968942443792348731105596962703271156831518563609471976550635245168619289504979241382473898595426977890790612987888878787427667030627860234384535252623091319519322223799271303395358738379711048826944407376885725681288838580266032109555686346766537428041661082087408642182708039497897311259543079633222305962226566972340312284423275451527975432419426798828758691063930755092407783651301804973410726225471657902284241555691135872004379483782882732415991135914910169644773945008481752947728721824749132079755800940363042585161735081087893818888988378735163343347283155042843865520552770861352893694416666170064393830424070756593141343140768794570500634725411103119')
    }

    @Unroll
    def 'can encode an integer'() {

        given:
            def integer = Asn1Integer.of(integerValue)

        expect:
            der.encode(integer).raw() == hex.of(bytesAsHex).decode()

        where:
            bytesAsHex                                                                                                                                                                                                                                                           | integerValue
            '020100'                                                                                                                                                                                                                                                             | BigInteger.ZERO
            '027F100102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E' | new BigInteger('43899791841096231375335560133913698194092254938553230549996114653246125149401433798335483461450031049819349913250781059244320433237190849466957512246841488907281106246654681357619850590631184553037423880123599901691767996079123583965661942414007388333666675268754832047250641792936659997324873260694506766')
            '0282020100cab25fbac06c771e163ad44d22b68de6727a3772b48e409bdd796c58b74ce306e46cb8aef2db2a7a2bc7746af8071d69775decde4c26ca2fcf0536a50866f9ddd08470d23841cd470855447f0c22a4fc2c5595e2ea898c5b2d51c5bcfb6ac4964dddb6b6378c47d5934e45c546db66e80522a02a03fdaa712d576289c67a3ed92fdf23611c7729913e2f6a0c44ecdf19a69370c25c6d96625779a965bb4b2a42b590c0d9712dacd65ba968748d149b940ac88a3bcbc04d1785bce101444b6084808a368efbd1e36e9a19eee3e0f7e5b08387d0597ac7511d7fc8739321981b8d86e9d9ef606647f69dbc53b3c2b06ad9f9f32b0de08cb267eaa904ae787569e8f748fbdc86ecbc42e6156a47c97085a0c512b99decc2b7f24a0e9e0c62e74dda5bd2e7286f5a10c56f360c0c39c9417e694c0ba181f5c96098023a9c559ab1774b7967d8c0ffa08dc03827029a9ff3c776e44202ffa6b9f0f7e163e75c57cb09629d4a55866ee9f0ccbcc5e024af22a33884e13f8d17d04fe8b2658493308cb3aa8ab501425898a8dc27a7c2a473b095bab4c8b428587c2e36ead2d48bee3dacf410455bdf4a13f9e6d698c16adf33fb261a287d9f6a0a0abb6c7ac3192a10be05cad986e74cf9e0744a69910be9aba5e0d38ff4053bf8186a6a85b3929d3b7e4287339928112fc40cb98d14ce251da290710d123b0c1daf0ea771f82b42a18f' | new BigInteger('826930688458401427167337078644639758102190287528354615888648434784781470414802825884263861959041030631281360332567339294455324344604162337720715216593518483218425350595691685374133607611484129008404486303467182510180390250108030833512771761834087873079426627064390193655690557121195818877453850457463052851207349085927463833027127106071220957621018437474049577421379860303512177509088573609807558120660849580386536283915666842882411597305997102875620680330552525533473644043474378806608524262327738894591819998615368887155819156261938344800936932880946983006327036501760323968942443792348731105596962703271156831518563609471976550635245168619289504979241382473898595426977890790612987888878787427667030627860234384535252623091319519322223799271303395358738379711048826944407376885725681288838580266032109555686346766537428041661082087408642182708039497897311259543079633222305962226566972340312284423275451527975432419426798828758691063930755092407783651301804973410726225471657902284241555691135872004379483782882732415991135914910169644773945008481752947728721824749132079755800940363042585161735081087893818888988378735163343347283155042843865520552770861352893694416666170064393830424070756593141343140768794570500634725411103119')
    }

}
